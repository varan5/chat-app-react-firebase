{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Varan\\\\Desktop\\\\Code\\\\React-Native\\\\Projects\\\\chat-app\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nvar firebaseConfig = {};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nYellowBox.ignoreWarnings([\"Setting a timer for a long period of time\"]);\nvar db = firebase.firestore();\nvar chatsRef = db.collection(\"chats\");\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  useEffect(function () {\n    readUser();\n    var unsubscribe = chatsRef.onSnapshot(function (querySnapshot) {\n      var messagesFirestore = querySnapshot.docChanges().filter(function (_ref) {\n        var type = _ref.type;\n        return type === \"added\";\n      }).map(function (_ref2) {\n        var doc = _ref2.doc;\n        var message = doc.data();\n        return _objectSpread(_objectSpread({}, message), {}, {\n          createdAt: message.createdAt.toDate()\n        });\n      }).sort(function (a, b) {\n        return b.createdAt.getTime() - a.createdAt.getTime();\n      });\n      appendMessages(messagesFirestore);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var appendMessages = useCallback(function (messages) {\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n  }, [messages]);\n\n  function readUser() {\n    var user;\n    return _regeneratorRuntime.async(function readUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              setUser(JSON.parse(user));\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handlePress() {\n    var _id, user;\n\n    return _regeneratorRuntime.async(function handlePress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = Math.random().toString(36).substring(7);\n            user = {\n              _id: _id,\n              name: name\n            };\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"user\", JSON.stringify(user)));\n\n          case 4:\n            setUser(user);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleSend(messages) {\n    var writes;\n    return _regeneratorRuntime.async(function handleSend$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            writes = messages.map(function (m) {\n              return chatsRef.add(m);\n            });\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Promise.all(writes));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (!user) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, React.createElement(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter your name\",\n      value: name,\n      onChangeText: setName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), React.createElement(Button, {\n      onPress: handlePress,\n      title: \"Enter the chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    user: user,\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30\n  },\n  input: {\n    height: 50,\n    width: \"100%\",\n    borderWidth: 1,\n    padding: 15,\n    marginBottom: 20,\n    borderColor: \"gray\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Varan/Desktop/Code/React-Native/Projects/chat-app/App.js"],"names":["React","useState","useEffect","useCallback","GiftedChat","AsyncStorage","firebase","firebaseConfig","apps","length","initializeApp","YellowBox","ignoreWarnings","db","firestore","chatsRef","collection","App","user","setUser","name","setName","messages","setMessages","readUser","unsubscribe","onSnapshot","querySnapshot","messagesFirestore","docChanges","filter","type","map","doc","message","data","createdAt","toDate","sort","a","b","getTime","appendMessages","previousMessages","append","getItem","JSON","parse","handlePress","_id","Math","random","toString","substring","setItem","stringify","handleSend","writes","m","add","Promise","all","styles","container","input","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","height","width","borderWidth","marginBottom","borderColor"],"mappings":"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","sourcesContent":["// @refresh reset\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { StyleSheet, TextInput, View, YellowBox, Button } from \"react-native\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  //Your firebase config here\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nYellowBox.ignoreWarnings([\"Setting a timer for a long period of time\"]);\n\nconst db = firebase.firestore();\nconst chatsRef = db.collection(\"chats\");\n\nexport default function App() {\n  const [user, setUser] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    readUser();\n    const unsubscribe = chatsRef.onSnapshot((querySnapshot) => {\n      const messagesFirestore = querySnapshot\n        .docChanges()\n        .filter(({ type }) => type === \"added\")\n        .map(({ doc }) => {\n          const message = doc.data();\n          //createdAt is firebase.firestore.Timestamp instance\n          //https://firebase.google.com/docs/reference/js/firebase.firestore.Timestamp\n          return { ...message, createdAt: message.createdAt.toDate() };\n        })\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n      appendMessages(messagesFirestore);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const appendMessages = useCallback(\n    (messages) => {\n      setMessages((previousMessages) =>\n        GiftedChat.append(previousMessages, messages)\n      );\n    },\n    [messages]\n  );\n\n  async function readUser() {\n    const user = await AsyncStorage.getItem(\"user\");\n    if (user) {\n      setUser(JSON.parse(user));\n    }\n  }\n  async function handlePress() {\n    const _id = Math.random().toString(36).substring(7);\n    const user = { _id, name };\n    await AsyncStorage.setItem(\"user\", JSON.stringify(user));\n    setUser(user);\n  }\n  async function handleSend(messages) {\n    const writes = messages.map((m) => chatsRef.add(m));\n    await Promise.all(writes);\n  }\n\n  if (!user) {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter your name\"\n          value={name}\n          onChangeText={setName}\n        />\n        <Button onPress={handlePress} title=\"Enter the chat\" />\n      </View>\n    );\n  }\n  return <GiftedChat messages={messages} user={user} onSend={handleSend} />;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30,\n  },\n  input: {\n    height: 50,\n    width: \"100%\",\n    borderWidth: 1,\n    padding: 15,\n    marginBottom: 20,\n    borderColor: \"gray\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}