{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Varan\\\\Desktop\\\\Code\\\\React-Native\\\\Projects\\\\chat-app\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { StatusBar } from \"expo-status-bar\";\nimport firebase from \"firebase\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAO79Yq5jjQWEsH5Oa-BEfBhvmMsyNZRoo\",\n  authDomain: \"chat-app-room-990d0.firebaseapp.com\",\n  projectId: \"chat-app-room-990d0\",\n  storageBucket: \"chat-app-room-990d0.appspot.com\",\n  messagingSenderId: \"347067636467\",\n  appId: \"1:347067636467:web:99d4118d6c25d7ca0ff586\"\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nYellowBox.ignoreWarnings([\"Setting a timer for a long period of time\"]);\nvar db = firebase.firestore();\nvar chatsReference = db.collection(\"chats\");\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  useEffect(function () {\n    readUser();\n    var unSubscripe = chatsReference.onSnapshot(function (querySnapshot) {\n      var messageFirestore = querySnapshot.docChanges().filter(function (_ref) {\n        var type = _ref.type;\n        return type === \"added\";\n      }).map(function (_ref2) {\n        var doc = _ref2.doc;\n        var message = doc.data;\n        return _objectSpread(_objectSpread({}, message), {}, {\n          createdAt: message.createdAt.toDate()\n        });\n      }).sort(function (a, b) {\n        return b.createdAt.getTime() - a;\n      });\n      setMessages(messageFirestore);\n    });\n  }, []);\n\n  var readUser = function readUser() {\n    var user;\n    return _regeneratorRuntime.async(function readUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              setUser(JSON.parse(user));\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onButtonPress = function onButtonPress() {\n    var _id, user;\n\n    return _regeneratorRuntime.async(function onButtonPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = Math.random().toString(36).substring(7);\n            user = {\n              _id: _id,\n              name: name\n            };\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"user\", JSON.stringify(user)));\n\n          case 4:\n            setUser(user);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!user) {\n    return React.createElement(View, {\n      style: styles.noUserContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, React.createElement(TextInput, {\n      style: styles.textInput,\n      placeholder: \"Enter your name\",\n      value: name,\n      onChange: setName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), React.createElement(Button, {\n      title: \"Enter chat room\",\n      onPress: onButtonPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(GiftedChat, {\n    messages: messages,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  noUserContainer: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  textInput: {\n    height: 50,\n    width: \"100%\",\n    borderWidth: 1,\n    padding: 15,\n    borderColor: \"gray\",\n    marginBottom: 35\n  }\n});","map":{"version":3,"sources":["C:/Users/Varan/Desktop/Code/React-Native/Projects/chat-app/App.js"],"names":["React","useState","useEffect","AsyncStorage","GiftedChat","StatusBar","firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","YellowBox","ignoreWarnings","db","firestore","chatsReference","collection","App","user","setUser","name","setName","messages","setMessages","readUser","unSubscripe","onSnapshot","querySnapshot","messageFirestore","docChanges","filter","type","map","doc","message","data","createdAt","toDate","sort","a","b","getTime","getItem","JSON","parse","onButtonPress","_id","Math","random","toString","substring","setItem","stringify","styles","noUserContainer","textInput","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","borderWidth","padding","borderColor","marginBottom"],"mappings":"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","sourcesContent":["// @refresh state\nimport React, { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport {\n  StyleSheet,\n  Text,\n  TextInput,\n  Button,\n  View,\n  YellowBox,\n} from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAO79Yq5jjQWEsH5Oa-BEfBhvmMsyNZRoo\",\n  authDomain: \"chat-app-room-990d0.firebaseapp.com\",\n  projectId: \"chat-app-room-990d0\",\n  storageBucket: \"chat-app-room-990d0.appspot.com\",\n  messagingSenderId: \"347067636467\",\n  appId: \"1:347067636467:web:99d4118d6c25d7ca0ff586\",\n};\n// Initialize Firebase\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nYellowBox.ignoreWarnings([\"Setting a timer for a long period of time\"]);\n\nconst db = firebase.firestore();\nconst chatsReference = db.collection(\"chats\");\n\nexport default function App() {\n  const [user, setUser] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    readUser();\n    const unSubscripe = chatsReference.onSnapshot((querySnapshot) => {\n      const messageFirestore = querySnapshot\n        .docChanges()\n        .filter(({ type }) => type === \"added\")\n        .map(({ doc }) => {\n          const message = doc.data;\n          return { ...message, createdAt: message.createdAt.toDate() };\n        })\n        .sort((a, b) => b.createdAt.getTime() - a);\n      setMessages(messageFirestore);\n    });\n  }, []);\n\n  const readUser = async () => {\n    const user = await AsyncStorage.getItem(\"user\");\n    if (user) {\n      setUser(JSON.parse(user));\n    }\n  };\n\n  const onButtonPress = async () => {\n    const _id = Math.random().toString(36).substring(7);\n    const user = { _id, name };\n    await AsyncStorage.setItem(\"user\", JSON.stringify(user));\n    setUser(user);\n  };\n\n  if (!user) {\n    return (\n      <View style={styles.noUserContainer}>\n        <TextInput\n          style={styles.textInput}\n          placeholder=\"Enter your name\"\n          value={name}\n          onChange={setName}\n        />\n        <Button title=\"Enter chat room\" onPress={onButtonPress} />\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      <GiftedChat messages={messages} user={user} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  noUserContainer: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  textInput: {\n    height: 50,\n    width: \"100%\",\n    borderWidth: 1,\n    padding: 15,\n    borderColor: \"gray\",\n    marginBottom: 35,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}